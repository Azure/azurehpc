#!/bin/bash

# Check size of cached CPU memory, if large than <CPU_CACHED_MEM_KB> argument then drop the memory caches.


function collect_cached_cpu_memory_data() {

   meminfo_out=$(cat /proc/meminfo)
   meminfo_out_rc=$?
   if [[ $meminfo_out_rc != 0 ]]; then
     log "$meminfo_out"
     die 1 "$FUNCNAME: Does /proc/meminfo exist, returned error code $meminfo_out_rc"
   fi
   IFS=$'\n'
   meminfo_lines=( $meminfo_out )
   IFS=$' \t\n'
}

function find_cpu_cached_mem() {

   for ((i=0; i<${#meminfo_lines[*]}; i++))
   do
      if [[ "${meminfo_lines[$i]//Cached}" != "${meminfo_lines[$i]}" ]]
      then
         IFS=$' \t\n'
         line=( ${meminfo_lines[$i]} )
         echo "${line[1]}"
         break
      fi
   done
}


function check_cpu_drop_mem_cache() {

   collect_cached_cpu_memory_data

   CPU_CACHED_MEM_KB=$1
   dbg "CPU_CACHED_MEM_KB=$CPU_CACHED_MEM_KB KB"
   if [[ -n $CPU_CACHED_MEM_KB ]]; then
           current_cpu_cached_mem_kb=$(find_cpu_cached_mem)
           dbg "current_cpu_cached_mem_kb=$current_cpu_cached_mem_kb KB"
           if [[ $current_cpu_cached_mem_kb -gt $CPU_CACHED_MEM_KB ]]; then
              dbg "$FUNCNAME: We will attempt to drop the cpu memory cache"
              cpu_drop_mem_cache_out=$(sync;echo 3 > /proc/sys/vm/drop_caches)
              cpu_drop_mem_cache_out_rc=$?
              if [[ $cpu_drop_mem_cache_out_rc != 0 ]]; then
                 log "$cpu_drop_mem_cache_out"
                 die 1 "$FUNCNAME: Could not drop the cpu memory cache, returned error code $cpu_drop_mem_cache_out_rc"
              else
                 log "Dropped the CPU memory cache successfully"
              fi
           fi
   else
      dbg "$FUNCNAME: Will not check the CPU cached memory, (CPU_CACHED_MEM_KB argument is not set)"
   fi
   return 0
}
